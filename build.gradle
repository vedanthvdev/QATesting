plugins {
    id 'java'
    id 'eclipse'
//    id 'maven'
    id 'idea'
    id 'org.sonarqube' version '2.6'
    id "io.freefair.lombok" version "6.5.0.2"
}

sourceCompatibility = JavaVersion.VERSION_17

group = 'exception'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

dependencies {
    implementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.10.0'
    implementation 'org.springframework.boot:spring-boot-starter-test:3.1.1'
    implementation 'io.cucumber:cucumber-spring:7.12.1'

    implementation 'io.cucumber:cucumber-java:7.12.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatypes-collections:2.15.2'

//    implementation 'io.cucumber:cucumber-java8:7.12.1'
//    implementation 'io.cucumber:cucumber-picocontainer:7.3.3'

//    implementation 'io.cucumber:cucumber-gherkin:7.3.3'
//    implementation 'io.cucumber:cucumber-plugin:7.3.3'
//    implementation 'org.apache.maven:maven-plugin-api:3.8.5'
//    implementation 'io.cucumber:cucumber-core:7.3.3'
//    implementation 'io.cucumber:gherkin:24.0.0'


//    implementation 'org.scenarioo:scenarioo-java:2.1.1'
//    implementation 'com.marvinformatics.formatter:formatter-maven-plugin:2.2.0'

//    implementation 'org.slf4j:slf4j-log4j12:1.7.36'
//    implementation 'org.webjars.npm:github-username:4.1.0'
//    implementation 'com.jwebmp.jackson.datatype:jackson-datatype-jdk8:0.66.0.1'
//    implementation 'org.kohsuke:github-api:1.306'
//    implementation 'io.github.nefilim.gradle:github-actions-generator-plugin:0.3.3'
//
//    implementation 'io.swagger:swagger-project:1.6.6'
//    implementation 'com.google.code.gson:gson:2.9.0'
//    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
//    implementation 'in.yajnesh.util:java-util:1.0.0'
//    implementation 'org.springframework:spring-context:5.3.20'
//    implementation 'io.swagger:swagger-inflector:2.0.7'
//    implementation 'io.swagger:swagger-annotations:1.6.6'
//    implementation 'io.swagger:swagger-models:1.6.6'
//    implementation 'io.swagger:swagger-core:1.6.6'
//    implementation 'io.swagger:swagger-parser:1.0.60'
//    implementation 'io.swagger:swagger-jaxrs:1.6.6'
//    implementation 'io.netty:netty-all:4.1.77.Final'
//    implementation 'org.testng:testng:7.6.0'
//    implementation 'org.junit.platform:junit-platform-launcher:1.8.2'
}


class TestProperties {
    boolean CUCUMBER_PUBLISH_QUIET
    String defaultAdditionalTags
}

project.extensions.add('chintest', new TestProperties())

chintest {
    CUCUMBER_PUBLISH_QUIET = true
    defaultAdditionalTags = "@run_all"
}


task integrationTestCucumberSequential(type:JavaExec, group: 'verification') {
    task -> configureCucumberTestTask((JavaExec) task, "not @ignore", "Sequential", project, 1)
}

static void configureCucumberTestTask(JavaExec task, String primaryTag, String runType, Project project, int threads) {
    TestProperties chintest = project.getExtensions().findByType(TestProperties.class)
    task.mainClass = "automation.core.framework.Launcher"
    task.environment("CUCUMBER_PUBLISH_QUIET", project.getProperties().getOrDefault('CUCUMBER_PUBLISH_QUIET', chintest.CUCUMBER_PUBLISH_QUIET))
    task.args("-g", "automation")
    task.args("-t", primaryTag)
    String additionalTags = ((String) project.getProperties().getOrDefault('additionalTags', chintest.defaultAdditionalTags)).trim()
    if (!additionalTags.isEmpty()) {
        additionalTags.split(",").each { t -> task.args('-t', t.trim()) }
    }
    task.args("-p", "pretty")
    task.args("-p", "html:build/${runType.toLowerCase()}/report/index.html")
    task.args("-p", "junit:build/${runType.toLowerCase()}/cukes.xml")
    task.args("-p", "timeline:build/${runType.toLowerCase()}/timeline")
    task.args("-p", "json:build/${runType.toLowerCase()}/cucumber.json")
    task.args("-p", "automation.core.framework.ExceptionEventListener")
    task.args("src/main/resources/features")

    task.doFirst {project.getLogger().lifecycle("${runType}: " + task.commandLine.join(" "))}

    task.classpath = project.sourceSets.test.runtimeClasspath
}

task customCucumberSuite() {
    doLast {
        integrationTestCucumberSequential.exec()
    }
}

integrationTestCucumberSequential.dependsOn('testClasses')
customCucumberSuite.dependsOn('testClasses')

test.dependsOn('customCucumberSuite')
